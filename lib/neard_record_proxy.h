/*
 * Generated by gdbus-codegen 2.30.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __NEARD_RECORD_PROXY_H__
#define __NEARD_RECORD_PROXY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.Record */

#define ORG_NEARD_RCD_TYPE_ (org_neard_rcd__get_type ())
#define ORG_NEARD_RCD_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ORG_NEARD_RCD_TYPE_, orgNeardRcd))
#define ORG_NEARD_RCD_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ORG_NEARD_RCD_TYPE_))
#define ORG_NEARD_RCD__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ORG_NEARD_RCD_TYPE_, orgNeardRcdIface))

struct _orgNeardRcd;
typedef struct _orgNeardRcd orgNeardRcd;
typedef struct _orgNeardRcdIface orgNeardRcdIface;

struct _orgNeardRcdIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_properties) (
    orgNeardRcd *object,
    GDBusMethodInvocation *invocation);

};

GType org_neard_rcd__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_neard_rcd__interface_info (void);
guint org_neard_rcd__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_neard_rcd__complete_get_properties (
    orgNeardRcd *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);



/* D-Bus method calls: */
void org_neard_rcd__call_get_properties (
    orgNeardRcd *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_neard_rcd__call_get_properties_finish (
    orgNeardRcd *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_neard_rcd__call_get_properties_sync (
    orgNeardRcd *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define ORG_NEARD_RCD_TYPE__PROXY (org_neard_rcd__proxy_get_type ())
#define ORG_NEARD_RCD__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ORG_NEARD_RCD_TYPE__PROXY, orgNeardRcdProxy))
#define ORG_NEARD_RCD__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ORG_NEARD_RCD_TYPE__PROXY, orgNeardRcdProxyClass))
#define ORG_NEARD_RCD__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ORG_NEARD_RCD_TYPE__PROXY, orgNeardRcdProxyClass))
#define ORG_NEARD_RCD_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ORG_NEARD_RCD_TYPE__PROXY))
#define ORG_NEARD_RCD_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ORG_NEARD_RCD_TYPE__PROXY))

typedef struct _orgNeardRcdProxy orgNeardRcdProxy;
typedef struct _orgNeardRcdProxyClass orgNeardRcdProxyClass;
typedef struct _orgNeardRcdProxyPrivate orgNeardRcdProxyPrivate;

struct _orgNeardRcdProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  orgNeardRcdProxyPrivate *priv;
};

struct _orgNeardRcdProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_neard_rcd__proxy_get_type (void) G_GNUC_CONST;

void org_neard_rcd__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
orgNeardRcd *org_neard_rcd__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
orgNeardRcd *org_neard_rcd__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_neard_rcd__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
orgNeardRcd *org_neard_rcd__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
orgNeardRcd *org_neard_rcd__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ORG_NEARD_RCD_TYPE__SKELETON (org_neard_rcd__skeleton_get_type ())
#define ORG_NEARD_RCD__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ORG_NEARD_RCD_TYPE__SKELETON, orgNeardRcdSkeleton))
#define ORG_NEARD_RCD__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ORG_NEARD_RCD_TYPE__SKELETON, orgNeardRcdSkeletonClass))
#define ORG_NEARD_RCD__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ORG_NEARD_RCD_TYPE__SKELETON, orgNeardRcdSkeletonClass))
#define ORG_NEARD_RCD_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ORG_NEARD_RCD_TYPE__SKELETON))
#define ORG_NEARD_RCD_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ORG_NEARD_RCD_TYPE__SKELETON))

typedef struct _orgNeardRcdSkeleton orgNeardRcdSkeleton;
typedef struct _orgNeardRcdSkeletonClass orgNeardRcdSkeletonClass;
typedef struct _orgNeardRcdSkeletonPrivate orgNeardRcdSkeletonPrivate;

struct _orgNeardRcdSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  orgNeardRcdSkeletonPrivate *priv;
};

struct _orgNeardRcdSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_neard_rcd__skeleton_get_type (void) G_GNUC_CONST;

orgNeardRcd *org_neard_rcd__skeleton_new (void);


G_END_DECLS

#endif /* __NEARD_RECORD_PROXY_H__ */
